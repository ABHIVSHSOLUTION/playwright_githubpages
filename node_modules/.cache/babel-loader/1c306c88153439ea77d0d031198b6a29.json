{"ast":null,"code":"import { apiSlice } from \"../../app/api\";\nimport { createEntityAdapter } from \"@reduxjs/toolkit\";\nconst userPolicyAdapter = createEntityAdapter();\nexport const initialState = userPolicyAdapter.getInitialState({\n  tableHeader: [\"Id \", \"Name\", \"Policy Name \", \"Amount \", \"Max Limit\", \"Claim Amount\", \"Actions\"],\n  newHeader: [\"ID\", \"Name\"],\n  usersPolicy: [],\n  status: \"one\"\n});\nexport const userPolicyApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getUserPolicy: builder.query({\n      query: () => \"/userpolicy\",\n      transformResponse: res => {\n        return userPolicyAdapter.setAll(initialState, res);\n      },\n      providesTags: [\"UserPolicy\"]\n    }),\n    addUserPolicy: builder.mutation({\n      query: obj => ({\n        url: \"/userpolicy/add\",\n        method: \"POST\",\n        body: obj\n      }),\n      invalidatesTags: [{\n        type: \"UserPolicy\"\n      }]\n    }),\n    updateUserPolicy: builder.mutation({\n      query: obj => ({\n        url: \"/userpolicy/update\",\n        method: \"PUT\",\n        body: obj\n      }),\n      invalidatesTags: [{\n        type: \"UserPolicy\"\n      }]\n    }),\n    claimPolicy: builder.mutation({\n      query: obj => ({\n        url: '/userpolicy/update/accept',\n        method: 'PUT',\n        body: obj\n      }),\n      invalidatesTags: [{\n        type: \"UserPolicy\"\n      }]\n    })\n  })\n});\nexport const {\n  useGetUserPolicyQuery,\n  useAddUserPolicyMutation,\n  useUpdateUserPolicyMutation,\n  useClaimPolicyMutation\n} = userPolicyApiSlice;","map":{"version":3,"names":["apiSlice","createEntityAdapter","userPolicyAdapter","initialState","getInitialState","tableHeader","newHeader","usersPolicy","status","userPolicyApiSlice","injectEndpoints","endpoints","builder","getUserPolicy","query","transformResponse","res","setAll","providesTags","addUserPolicy","mutation","obj","url","method","body","invalidatesTags","type","updateUserPolicy","claimPolicy","useGetUserPolicyQuery","useAddUserPolicyMutation","useUpdateUserPolicyMutation","useClaimPolicyMutation"],"sources":["/home/abhi/VSH/playwright-poc/src/components/userPolicy/userPolicyApiSlice.js"],"sourcesContent":["import { apiSlice } from \"../../app/api\";\nimport { createEntityAdapter } from \"@reduxjs/toolkit\";\nconst userPolicyAdapter = createEntityAdapter();\n\nexport const initialState = userPolicyAdapter.getInitialState({\n  tableHeader: [\n    \"Id \",\n    \"Name\",\n    \"Policy Name \",\n    \"Amount \",\n    \"Max Limit\",\n    \"Claim Amount\",\n    \"Actions\",\n    ],\n\n    newHeader : [\"ID\" , \"Name\"],\n  usersPolicy: [],\n  status: \"one\",\n});\n\n\nexport const userPolicyApiSlice = apiSlice.injectEndpoints({\n    endpoints: (builder) => ({\n        getUserPolicy: builder.query({\n            query: () => \"/userpolicy\",\n            transformResponse: (res) => {\n                return userPolicyAdapter.setAll(initialState , res)\n            },\n            providesTags : [\"UserPolicy\"]\n        }),\n        addUserPolicy: builder.mutation({\n            query: (obj) => ({\n                url: \"/userpolicy/add\",\n                method: \"POST\",\n                body: obj,\n              \n            }),\n            invalidatesTags: [{type:\"UserPolicy\"}]\n\n        })\n        ,\n        updateUserPolicy: builder.mutation({\n            query: (obj) => ({\n                url: \"/userpolicy/update\",\n                method: \"PUT\",\n                body: obj,\n              \n            }),\n            invalidatesTags: [{type:\"UserPolicy\"}]\n\n        }),\n        claimPolicy: builder.mutation({\n            query: (obj) => ({\n                url: '/userpolicy/update/accept',\n                method: 'PUT',\n                body : obj \n            }),\n            invalidatesTags: [{type:\"UserPolicy\"}]\n        }),\n     \n        \n    })\n})\n\nexport const { useGetUserPolicyQuery , useAddUserPolicyMutation , useUpdateUserPolicyMutation , useClaimPolicyMutation} = userPolicyApiSlice;"],"mappings":"AAAA,SAASA,QAAT,QAAyB,eAAzB;AACA,SAASC,mBAAT,QAAoC,kBAApC;AACA,MAAMC,iBAAiB,GAAGD,mBAAmB,EAA7C;AAEA,OAAO,MAAME,YAAY,GAAGD,iBAAiB,CAACE,eAAlB,CAAkC;EAC5DC,WAAW,EAAE,CACX,KADW,EAEX,MAFW,EAGX,cAHW,EAIX,SAJW,EAKX,WALW,EAMX,cANW,EAOX,SAPW,CAD+C;EAW1DC,SAAS,EAAG,CAAC,IAAD,EAAQ,MAAR,CAX8C;EAY5DC,WAAW,EAAE,EAZ+C;EAa5DC,MAAM,EAAE;AAboD,CAAlC,CAArB;AAiBP,OAAO,MAAMC,kBAAkB,GAAGT,QAAQ,CAACU,eAAT,CAAyB;EACvDC,SAAS,EAAGC,OAAD,KAAc;IACrBC,aAAa,EAAED,OAAO,CAACE,KAAR,CAAc;MACzBA,KAAK,EAAE,MAAM,aADY;MAEzBC,iBAAiB,EAAGC,GAAD,IAAS;QACxB,OAAOd,iBAAiB,CAACe,MAAlB,CAAyBd,YAAzB,EAAwCa,GAAxC,CAAP;MACH,CAJwB;MAKzBE,YAAY,EAAG,CAAC,YAAD;IALU,CAAd,CADM;IAQrBC,aAAa,EAAEP,OAAO,CAACQ,QAAR,CAAiB;MAC5BN,KAAK,EAAGO,GAAD,KAAU;QACbC,GAAG,EAAE,iBADQ;QAEbC,MAAM,EAAE,MAFK;QAGbC,IAAI,EAAEH;MAHO,CAAV,CADqB;MAO5BI,eAAe,EAAE,CAAC;QAACC,IAAI,EAAC;MAAN,CAAD;IAPW,CAAjB,CARM;IAmBrBC,gBAAgB,EAAEf,OAAO,CAACQ,QAAR,CAAiB;MAC/BN,KAAK,EAAGO,GAAD,KAAU;QACbC,GAAG,EAAE,oBADQ;QAEbC,MAAM,EAAE,KAFK;QAGbC,IAAI,EAAEH;MAHO,CAAV,CADwB;MAO/BI,eAAe,EAAE,CAAC;QAACC,IAAI,EAAC;MAAN,CAAD;IAPc,CAAjB,CAnBG;IA6BrBE,WAAW,EAAEhB,OAAO,CAACQ,QAAR,CAAiB;MAC1BN,KAAK,EAAGO,GAAD,KAAU;QACbC,GAAG,EAAE,2BADQ;QAEbC,MAAM,EAAE,KAFK;QAGbC,IAAI,EAAGH;MAHM,CAAV,CADmB;MAM1BI,eAAe,EAAE,CAAC;QAACC,IAAI,EAAC;MAAN,CAAD;IANS,CAAjB;EA7BQ,CAAd;AAD4C,CAAzB,CAA3B;AA2CP,OAAO,MAAM;EAAEG,qBAAF;EAA0BC,wBAA1B;EAAqDC,2BAArD;EAAmFC;AAAnF,IAA6GvB,kBAAnH"},"metadata":{},"sourceType":"module"}